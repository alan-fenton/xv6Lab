Exercise 1:
$ ps
name	pid	state		priority
init	1	SLEEPING	10
sh	2	SLEEPING	10
ps	3	RUNNING		10



Exercise 2:
$ lab3test 4 &
$ PCahreintl d 5 6cr ecarteiantge dc
hild 6
Parent 5 creating child 7
Parent 5 creating child 8
Parent 5 creating child 9
Child Child 87 Ccreated
 created
hzombie!
ild 9 created
ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
lab3test		6	RUNNABLE	20
ps		10	RUNNING		10
lab3test		7	RUNNABLE	20
lab3test		8	RUNNABLE	20
lab3test		9	RUNNING		20
$ set_priority 6 18
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
lab3test		6	RUNNING		18
ps		12	RUNNING		10
lab3test		7	RUNNABLE	20
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20



Exercise 3:
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		22	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNING		20
lab3test		11	RUNNABLE	20
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		23	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		20
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		24	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNING		20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNABLE	20




Exercise 5
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		19	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		19
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		20	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		19
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		21	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		19
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		22	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		19
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		23	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		19
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		24	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		19
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		25	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		19
$ set_priority 11 9
$ ps
name		pid	state		priority
init		1	SLEEPING	10
sh		2	SLEEPING	10
ps		27	RUNNING		10
lab3test		10	SLEEPING	10
lab3test		5	SLEEPING	10
lab3test		7	SLEEPING	10
lab3test		8	RUNNABLE	20
lab3test		9	RUNNABLE	20
lab3test		11	RUNNING		9
$ set_priority 9 9

ps
QEMU: Terminated
For Exercise 5, we first ran the command:
lab3test &
three times. The reason we could not run it as "lab3test 4 &" is because if we had the wait call added in a previous exercise would cause the second and third children to not be created until the first child returned.
Then we examined the priority several times. At first, it was running a different instance of the process, at random, but then after the set_priority command is executed, the process with pid 11 and priority 19 is running each time that the ps command is executed, this is because it is the runnable process with the highest priority. Note that with Priority 19, it is selected after ps is selected, which suggests that there are 2 cores for the virtual processor. Then, as an experiment, we changed two processes to have priority 9, so that they are higher priority than the system calls. This causes the system to lock up and become non-responsive, which confirms the earlier theory that xv6 runs with two cpus.
